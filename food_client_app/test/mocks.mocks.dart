// Mocks generated by Mockito 5.4.4 from annotations
// in food_client/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i12;

import 'package:flutter/material.dart' as _i8;
import 'package:food_client/pages/common/error.dart' as _i4;
import 'package:food_client/pages/features/ingredients_sorting/services/ingredients_sorting_navigation_service.dart'
    as _i5;
import 'package:food_client/pages/features/ingredients_sorting/services/persistance_service/ingredients_sorting_persistence_service.dart'
    as _i10;
import 'package:food_client/pages/features/ingredients_sorting/services/web_service/ingredients_sorting_web_client_service.dart'
    as _i3;
import 'package:food_client/pages/features/ingredients_sorting/services/web_service/ingredients_sorting_web_image_sizer_service.dart'
    as _i9;
import 'package:food_client/pages/features/home/services/home_navigation_service.dart'
    as _i14;
import 'package:food_client/pages/features/home/services/home_web_client_service.dart'
    as _i11;
import 'package:food_client/pages/features/home/services/home_web_image_sizer_service.dart'
    as _i13;
import 'package:food_client/services/logging_service/logging_service.dart'
    as _i15;
import 'package:food_client/services/navigation_service/navigation_service.dart'
    as _i7;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskEither_0<L, R> extends _i1.SmartFake
    implements _i2.TaskEither<L, R> {
  _FakeTaskEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IngredientsSortingWebClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsSortingWebClientService extends _i1.Mock
    implements _i3.IngredientsSortingWebClientService {
  MockIngredientsSortingWebClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskEither<_i4.MyError,
          List<_i3.IngredientsSortingWebClientModelIngredientSorting>>
      fetchIngredientsSorting() => (super.noSuchMethod(
            Invocation.method(
              #fetchIngredientsSorting,
              [],
            ),
            returnValue: _FakeTaskEither_0<_i4.MyError,
                List<_i3.IngredientsSortingWebClientModelIngredientSorting>>(
              this,
              Invocation.method(
                #fetchIngredientsSorting,
                [],
              ),
            ),
          ) as _i2.TaskEither<_i4.MyError,
              List<_i3.IngredientsSortingWebClientModelIngredientSorting>>);
}

/// A class which mocks [IngredientsSortingNavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsSortingNavigationService extends _i1.Mock
    implements _i5.IngredientsSortingNavigationService {
  MockIngredientsSortingNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void navigateToNamed({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #navigateToNamed,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goBack() => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showSnackBar({required String? message}) => super.noSuchMethod(
        Invocation.method(
          #showSnackBar,
          [],
          {#message: message},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void closeDialog<T>({T? data}) => super.noSuchMethod(
        Invocation.method(
          #closeDialog,
          [],
          {#data: data},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop<T>({T? data}) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
          {#data: data},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void push({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #push,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceWith({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceWithNamed({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #replaceWithNamed,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> showDialog({
    _i2.Option<List<_i7.NavigationServiceDialogAction>>? actions =
        const _i2.None(),
    required String? title,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #actions: actions,
            #title: title,
            #content: content,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> showModalBottomSheet({required _i8.Widget? child}) =>
      (super.noSuchMethod(
        Invocation.method(
          #showModalBottomSheet,
          [],
          {#child: child},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [IngredientsSortingWebImageSizerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsSortingWebImageSizerService extends _i1.Mock
    implements _i9.IngredientsSortingWebImageSizerService {
  MockIngredientsSortingWebImageSizerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<Exception, Uri> getUrl({
    required Uri? filePath,
    required int? widthPixels,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUrl,
          [],
          {
            #filePath: filePath,
            #widthPixels: widthPixels,
          },
        ),
        returnValue: _FakeEither_1<Exception, Uri>(
          this,
          Invocation.method(
            #getUrl,
            [],
            {
              #filePath: filePath,
              #widthPixels: widthPixels,
            },
          ),
        ),
      ) as _i2.Either<Exception, Uri>);
}

/// A class which mocks [IngredientsSortingPersistenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsSortingPersistenceService extends _i1.Mock
    implements _i10.IngredientsSortingPersistenceService {
  MockIngredientsSortingPersistenceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.IngredientsSortingPersistenceModelUnit> getUnits() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnits,
          [],
        ),
        returnValue: <_i10.IngredientsSortingPersistenceModelUnit>[],
      ) as List<_i10.IngredientsSortingPersistenceModelUnit>);

  @override
  _i2.TaskEither<Exception, void> deleteUnit({required String? unitId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUnit,
          [],
          {#unitId: unitId},
        ),
        returnValue: _FakeTaskEither_0<Exception, void>(
          this,
          Invocation.method(
            #deleteUnit,
            [],
            {#unitId: unitId},
          ),
        ),
      ) as _i2.TaskEither<Exception, void>);

  @override
  _i2.TaskEither<_i4.MyError, void> saveUnit(
          {required _i10.IngredientsSortingPersistenceModelUnit? unit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUnit,
          [],
          {#unit: unit},
        ),
        returnValue: _FakeTaskEither_0<_i4.MyError, void>(
          this,
          Invocation.method(
            #saveUnit,
            [],
            {#unit: unit},
          ),
        ),
      ) as _i2.TaskEither<_i4.MyError, void>);
}

/// A class which mocks [HomeWebClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeWebClientService extends _i1.Mock
    implements _i11.HomeWebClientService {
  MockHomeWebClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskEither<Exception,
      _i11.HomeWebClientModelRecipeResponse> fetchRecipes({
    required int? take,
    required int? skip,
    required List<_i12.Locale>? recipeLocales,
    _i2.Option<List<String>>? tagIds = const _i2.None(),
    _i2.Option<String>? cuisineId = const _i2.None(),
    _i2.Option<List<String>>? ingredients = const _i2.None(),
    _i2.Option<String>? searchTerm = const _i2.None(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRecipes,
          [],
          {
            #take: take,
            #skip: skip,
            #recipeLocales: recipeLocales,
            #tagIds: tagIds,
            #cuisineId: cuisineId,
            #ingredients: ingredients,
            #searchTerm: searchTerm,
          },
        ),
        returnValue:
            _FakeTaskEither_0<Exception, _i11.HomeWebClientModelRecipeResponse>(
          this,
          Invocation.method(
            #fetchRecipes,
            [],
            {
              #take: take,
              #skip: skip,
              #recipeLocales: recipeLocales,
              #tagIds: tagIds,
              #cuisineId: cuisineId,
              #ingredients: ingredients,
              #searchTerm: searchTerm,
            },
          ),
        ),
      ) as _i2.TaskEither<Exception, _i11.HomeWebClientModelRecipeResponse>);

  @override
  _i2.TaskEither<Exception,
      List<_i11.HomeWebClientModelCuisine>> fetchCuisines({
    required List<_i12.Locale>? recipeLocales,
    _i2.Option<int>? take = const _i2.None(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCuisines,
          [],
          {
            #recipeLocales: recipeLocales,
            #take: take,
          },
        ),
        returnValue:
            _FakeTaskEither_0<Exception, List<_i11.HomeWebClientModelCuisine>>(
          this,
          Invocation.method(
            #fetchCuisines,
            [],
            {
              #recipeLocales: recipeLocales,
              #take: take,
            },
          ),
        ),
      ) as _i2.TaskEither<Exception, List<_i11.HomeWebClientModelCuisine>>);

  @override
  _i2.TaskEither<Exception, List<_i11.HomeWebClientModelTag>> fetchTags({
    required List<_i12.Locale>? recipeLocales,
    _i2.Option<int>? take = const _i2.None(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTags,
          [],
          {
            #recipeLocales: recipeLocales,
            #take: take,
          },
        ),
        returnValue:
            _FakeTaskEither_0<Exception, List<_i11.HomeWebClientModelTag>>(
          this,
          Invocation.method(
            #fetchTags,
            [],
            {
              #recipeLocales: recipeLocales,
              #take: take,
            },
          ),
        ),
      ) as _i2.TaskEither<Exception, List<_i11.HomeWebClientModelTag>>);
}

/// A class which mocks [HomeWebImageSizerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeWebImageSizerService extends _i1.Mock
    implements _i13.HomeWebImageSizerService {
  MockHomeWebImageSizerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<Exception, Uri> getUrl({
    required Uri? filePath,
    required int? widthPixels,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUrl,
          [],
          {
            #filePath: filePath,
            #widthPixels: widthPixels,
          },
        ),
        returnValue: _FakeEither_1<Exception, Uri>(
          this,
          Invocation.method(
            #getUrl,
            [],
            {
              #filePath: filePath,
              #widthPixels: widthPixels,
            },
          ),
        ),
      ) as _i2.Either<Exception, Uri>);
}

/// A class which mocks [HomeNavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeNavigationService extends _i1.Mock
    implements _i14.HomeNavigationService {
  MockHomeNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void navigateToNamed({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #navigateToNamed,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goBack() => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showSnackBar({required String? message}) => super.noSuchMethod(
        Invocation.method(
          #showSnackBar,
          [],
          {#message: message},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void closeDialog<T>({T? data}) => super.noSuchMethod(
        Invocation.method(
          #closeDialog,
          [],
          {#data: data},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop<T>({T? data}) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
          {#data: data},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void push({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #push,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceWith({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceWithNamed({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #replaceWithNamed,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> showDialog({
    _i2.Option<List<_i7.NavigationServiceDialogAction>>? actions =
        const _i2.None(),
    required String? title,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #actions: actions,
            #title: title,
            #content: content,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> showModalBottomSheet({required _i8.Widget? child}) =>
      (super.noSuchMethod(
        Invocation.method(
          #showModalBottomSheet,
          [],
          {#child: child},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i15.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void info({required String? message}) => super.noSuchMethod(
        Invocation.method(
          #info,
          [],
          {#message: message},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning({required String? message}) => super.noSuchMethod(
        Invocation.method(
          #warning,
          [],
          {#message: message},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(_i4.MyError? error) => super.noSuchMethod(
        Invocation.method(
          #error,
          [error],
        ),
        returnValueForMissingStub: null,
      );
}
